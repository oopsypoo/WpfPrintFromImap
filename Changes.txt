----------------
-- 2020.02.14 --
----------------
Two major differences:
1.	Handling of passwords
2.	Saving of application-data.

1.	I'm now using a Credential-manager to store the password(MS-password-vault??). So I added the NuGet-package CredentialManagement, which is also the namespace that has to be added. I feel better using this method than the past method.
	It's not "SAFE", but it's "safer"...things can always be done "safer", but this is the best solution for now without making this a ridiculously big project. Enough said...
	- see "public static class CredentialUtil"

2.	Instead of saving data in a "flat" file, I'm saving the data in a xml-file which is serialized and deserialized to save data. I like this method, and I like building the class the way c# does it. I't easy and pretty 
	straight forward.
	- see "public class AppConfig".


----------------
-- 2019.11.25 --
----------------
 Fixed a BUG:
	-	Occures when a string(place) in the subject contains "ark". In other words when there are more than one occurrance of "ark". It returns the first occurance and the Match-function fails.
		FIX: Just look for a second occurence of "ark". I don't think it's neccesary to look for any more. Time will see.

----------------
-- 2019.10.31 --
----------------
Latest "fix": 
 -  Since "client/customer" does not have control of filename(we have to assume, since it's happened more than 5x), we have to make a check for filetype "pdf". 
	If filename does not exist, add ".pdf" at the end of the filename before saving it locally and printing it.
 -	Changed the UTF8 character-range for the Match-function. 
	- ([\p{L}]+)" does not fit all characters that are sent. I'm not sure why. Maybe the sender is using a different character set, or windows is making a correct "guess".
	  Ex. after analysing the bytes from the utf-8 character 'å'(latin small 'a' with circle above) we get that the character consists of the bytes(in decimal) 195 and 133. The client sent 3 bytes for the character 'å'
	  65, 204 and 138. I assumed that this was a 3 byte version of the UTF-8 character 'å', but after making some calculations, this is not the case. But still windows characterized it as 'å'(latin small 'a' with circle above).
	  One theory is that it's a swedish 'ä'(message sent from sweden) and the norwegian version of Windows 10 with norwegian culture-info automatically sets it 'å'.
	- Went back to using a character range: original([\u0061-\u00f8]+) to ([\u0061-\u10f8]+). When testing this solved the problem with the 3 bytes(dec) 65, 204 and 138. It was just an "dumb" guess.
	The point of it all was that I did not want the function to fail(Regex.Match(...)), so I that I had to give default values. At this point it works. 
	But ofcourse...this is a weakness...that I do not know what the 3 bytes(dec) 65, 204 and 138 represent. What character-set is this is coming from...for now I'm going to live with it. 
	No more time to think about it. But these lines noted here were my thoughts about it
	Just as a small digression: I removed all norwegian letters defined like this 
		- var charsToRemove = new string[] { "-", " ", ",", ".","å", "ø", "æ" };
	...and still the function fails; because the three bytes (dec) 65, 204 and 138 are none of these...

 -  Made the progress-bar-dialog-box "topmost", so that you cannot start pushing buttons or other controls before the "get mails action" is done/finished.

 -  Added more messaging from main window to the progress-bar dialog-box just to inform the user that something is happening.

----------------
-- 2019.10.21 --
----------------
Decided to add a progress-bar while connecting and fetching mail from the IMAP-server. Reason for this is that impatient users will 
start to click all ver the place and think something ios wrong if the operation takes time.

The progress-bar is opened in a new windows, and the connect an fetch operation is now in different functions/split up. The operation 
OpenConnectMails(..) is tarted in a new thread/task so I had to rearrange a little bit. It's actually getting a little bit messy. I can
see now that a lot of the solutions can be rearranged. But that's for another time. So there's a new source:
 - WinProgress.xaml.cs 
 - WinProgress.xaml


----------------
-- 2019.10.03 --
----------------
1.	FilterSubject - RegEx is improved for capturing Norwegian letters using "switch" \p{L}
2.	Change of printers was not updated. The member variables printer_plain and printer_adhessive is now updated when the "Change printer"-button is pressed, 
	and saved to file when "Save&Exit"-button is pressed. 

----------------
-- 2019.09.24 --
----------------
1.	FilterSubject is completely changed by using Regex functionality in C# .NET. See source for now.

----------------
-- 2019.09.24 --
----------------
1.	Had to fix a couple of special cases in function FilterSubject, where the user has not put a space between '-' and no of pages.
2.	In same function decided to remove all '-' from the original string.
3.	In same function, there's a special case where user has not put a space between the strings "ordre" and ORDER_NO
4.	In constructor-function for class MailSnippet: had to make special case for when city/place consists of 3 strings. 
5.	Added new function SplitString(a, b) hich splits a string that has been concatenated by user. 
	Example: ordre12345, which should be in the form "ordre 12345", or "12ARK" which should be in the form "12 ARK"

----------------
-- 2019.09.23 --
----------------
1.	Added some comments(summary, returns...). Will continue this at a later time.

----------------
-- 2019.09.20 --
----------------
1.	I copied the code from a test-program and forgot to remove the initialization of the variables locally. The variables are member-variables og the MailSnippet-class. My bad.
	The result of not doing it was that only one copy of the attachment file was printed, and not the correct number.
	I debugged at work, and I commit the changes at howm --oO

----------------
-- 2019.09.18 --
----------------
1.	Added workaround for names consisting of two words(never thought of that)
2.	Added dateformat in case of a formatexception on dateTime.

----------------
-- 2019.09.11 --
----------------
1.	Removed module Ghostscript.NET (using pdfium, don't need it)
2.	RemoveNegative is renamed to FilterSubject
3.	Added more functionality to FilterSubject - funcion. There are situations where sender adds messages after the standard subject. 
	These messages has to be ignored

----------------
-- 2019.09.10 --
----------------
1.	Updated all dependencies and modules.
2.	When reading the settings-file there may be an unhandled exception when the file exists, 
	but the it's empty. Solution is to just delete it and create a new one. This happened 
	when the settingsfile was transfered from one PC to another and the printer-queue does not have the same name
	as the previous one. The exception occurs when opening the settings-dialog-box, and we could not actually
	open the dialog box for adding the new settings.